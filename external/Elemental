# -*- mode: cmake -*-

######################
# Find Elemental
######################


find_path(ELEMENTAL_INCLUDE_DIR elemental.hpp)

set(ELEMENTAL_LIBRARIES "")
foreach (_lib elemental pmrrr)
  set(_libpath _libpath-NOTFOUND)
  find_library(_libpath ${_lib})
  #message(STATUS "Found ${_lib}: ${_libpath}")
  if (_libpath)
    list(APPEND ELEMENTAL_LIBRARIES ${_libpath})
  endif()
endforeach()

if(ELEMENTAL_INCLUDE_DIR)
  message(STATUS "Found elemental.hpp")
endif(ELEMENTAL_INCLUDE_DIR)

if (ELEMENTAL_LIBRARIES)

  if (NOT ELEMENTAL_INCLUDE_DIR)
    message(FATAL_ERROR "Could not find elemental.hpp")
  endif(NOT ELEMENTAL_INCLUDE_DIR)
  
  # ELemental compiles check
  list(APPEND CMAKE_REQUIRED_INCLUDES ${ELEMENTAL_INCLUDE_DIR})
  list(APPEND CMAKE_REQUIRED_LIBRARIES ${ELEMENTAL_LIBRARIES})
  list(APPEND CMAKE_REQUIRED_LIBRARIES ${LAPACK_LIBRARIES})
  CHECK_CXX_SOURCE_COMPILES(
    "
    #include <elemental.hpp>
    using namespace elem;
    int main (int argc, char** argv){
      Initialize(argc, argv);
      mpi::Comm comm = mpi::COMM_WORLD;
      const Grid grid(comm);
      DistMatrix<double> X(grid);
      Identity(X, 16, 16);
      
      Finalize();
      return 0;
    }
    " 
    ELEMENTAL_COMPILES
  )   
  
  if (NOT ELEMENTAL_COMPILES)
    message(FATAL_ERROR "Could not compile Elemental test program")
  endif(NOT ELEMENTAL_COMPILES)
  
  if (ELEMENTAL_COMPILES)
    set (HAVE_ELEMENTAL TRUE)
    message(STATUS "Found ELEMENTAL")
    message(STATUS "\tELEMENTAL_LIBRARIES = ${ELEMENTAL_LIBRARIES}")
    message(STATUS "\tELEMENTAL_INCLUDE_DIR = ${ELEMENTAL_INCLUDE_DIR}")
    include_directories(${ELEMENTAL_INCLUDE_DIR})
  endif(ELEMENTAL_COMPILES)

endif(ELEMENTAL_LIBRARIES)
    
    
    
    
    
    
    
    