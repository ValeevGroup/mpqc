# -*- mode: cmake -*-

###################
# Find MADNESS
###################

set(MADNESS_LIBRARIES "")
foreach (_lib MADworld MADtensor MADlinalg MADmisc MADmra MADtinyxml MADmuparser)
  set(_libpath _libpath-NOTFOUND)
  find_library(_libpath ${_lib})
  #message(STATUS "Found ${_lib}: ${_libpath}")
  if (_libpath)
    list(APPEND MADNESS_LIBRARIES ${_libpath})
  endif()
endforeach()

find_path(MADNESS_INCLUDE_DIR madness_config.h)

if (MADNESS_LIBRARIES)
  if (NOT MADNESS_INCLUDE_DIR)
    message(FATAL_ERROR "Could not find madness_config.h")
  endif()

  # sanity check: try compiling a simple program
  list(APPEND CMAKE_REQUIRED_INCLUDES ${MADNESS_INCLUDE_DIR})
  list(APPEND CMAKE_REQUIRED_LIBRARIES ${MADNESS_LIBRARIES})
  IF(MPQC_ELEMENTAL)
    list(APPEND CMAKE_REQUIRED_INCLUDES ${ELEMENTAL_INCLUDE_DIR})
    list(APPEND CMAKE_REQUIRED_LIBRARIES ${ELEMENTAL_LIBRARIES})
  ENDIF(MPQC_ELEMENTAL)
  CHECK_CXX_SOURCE_COMPILES(
    "
    #include <world/world.h>
    int main(int argc, char** argv) {
      madness::World& world = madness::initialize(argc, argv);
      return 0;
    }
    "  MADNESS_COMPILES)
  if (NOT MADNESS_COMPILES)
    message(FATAL_ERROR "Could not compile MADNESS test program")
  endif()
  
  # check that MADNESS BLAS/LAPACK interface width agrees with what MPQC assumed
  set(CMAKE_REQUIRED_DEFINITIONS "-DF77_INTEGER_WIDTH=${F77_INTEGER_WIDTH}")
  CHECK_CXX_SOURCE_COMPILES(
    "
    #include <madness_config.h>
    #if MADNESS_FORTRAN_DEFAULT_INTEGER_SIZE != F77_INTEGER_WIDTH
    # error \"MADNESS FORTRAN integer width differs from that of MPQC\"
    #endif
    int main(int argc, char** argv) {
      return 0;
    }
    "  MADNESS_FORTRAN_INTEGER_WIDTH_COMPATIBLE)
  if (NOT MADNESS_FORTRAN_INTEGER_WIDTH_COMPATIBLE)
    if (${F77_INTEGER_WIDTH} STREQUAL 8)
      message(FATAL_ERROR "MADNESS default FORTRAN integer width does not match that of MPQC. You need to omit --integer8 configure flag.")
    else()
      message(FATAL_ERROR "MADNESS default FORTRAN integer width does not match that of MPQC. You need to add --integer8 configure flag.")
    endif()
  endif()
    
  set(HAVE_MADNESS TRUE)
  message(STATUS "Found MADNESS:")
  message(STATUS "\tMADNESS_LIBRARIES=${MADNESS_LIBRARIES}")
  message(STATUS "\tMADNESS_INCLUDE_DIR=${MADNESS_INCLUDE_DIR}")
  include_directories(${MADNESS_INCLUDE_DIR})
endif()


###################
# Find TiledArray
###################

find_path(TiledArray_INCLUDE_DIR tiled_array.h)

if (TiledArray_INCLUDE_DIR)

  # sanity check: try compiling a simple program
  list(APPEND CMAKE_REQUIRED_INCLUDES ${TiledArray_INCLUDE_DIR})
  CHECK_CXX_SOURCE_COMPILES(
    "
    #include <tiled_array.h>
    int main(int argc, char** argv) {
      madness::World& world = madness::initialize(argc, argv);
      std::vector<TiledArray::TiledRange1> tile_ranges;
      size_t tile_bounds[] = {0, 3, 7}; // 2 tiles; N.B. double square brackets due to autoconf madness
      const size_t ntiles = sizeof(tile_bounds)/sizeof(size_t) - 1;
      tile_ranges.push_back(TiledArray::TiledRange1(tile_bounds, tile_bounds+ntiles));
      tile_ranges.push_back(TiledArray::TiledRange1(tile_bounds, tile_bounds+ntiles));
      TiledArray::TiledRange trange_2d(tile_ranges.begin(), tile_ranges.end());
      TiledArray::Array<double,2> array_2d(world, trange_2d);
      TiledArray::Array<double,2> array_2d_tr(array_2d.get_world(), array_2d.trange());
      array_2d_tr(\"i,j\") = array_2d(\"j,i\");
      return 0;
    }
    "  TILEDARRAY_COMPILES)
  
  if (NOT TILEDARRAY_COMPILES)
    message(FATAL_ERROR "Could not compile TiledArray test program")
  endif()
  
  if(ELEMENTAL_LIBRARIES)
    # sanity check try to compile a ta elemental program
    list(APPEND CMAKE_REQUIRED_INCLUDES ${ELEMENTAL_INCLUDE_DIR})
    list(APPEND CMAKE_REQUIRED_LIBRARIES ${ELEMENTAL_LIBRARIES})
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_ELEMENTAL)
    CHECK_CXX_SOURCE_COMPILES(
      "
      #include <tiled_array.h>
      int main(int argc, char** argv){
        madness::World& world = madness::initialize(argc, argv);
        elem::DistMatrix<double> matrix(elem::DefaultGrid());
        return 0;
      }
      " TILEDARRAY_ELEM_COMPILES)
      
      IF(NOT TILEDARRAY_ELEM_COMPILES)
        message(FATAL_ERROR  "Could not compile TiledArray with Elemental")
      ENDIF(NOT TILEDARRAY_ELEM_COMPILES)
   ENDIF(ELEMENTAL_LIBRARIES)
      

  set(HAVE_TILEDARRAY TRUE)
  message(STATUS "Found TiledArray:")
  message(STATUS "\tTiledArray_INCLUDE_DIR=${TiledArray_INCLUDE_DIR}")
  include_directories(${TiledArray_INCLUDE_DIR})
endif()
